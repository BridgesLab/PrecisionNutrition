---
title: "WGCNA Analysis of DO Livers"
subtitle: "Construction of Modules"
author: "Dave Bridges"
date: "January 26, 2025"
editor: source
format: 
  html:
    toc: true
    toc-location: right
    keep-md: true
    code-fold: true
    code-summary: "Show the code"
    fig-path: "figures/"
  gfm:
    html-math-method: webtex
theme: journal
execute:
  echo: true
  warning: false
---

```{r global_options, include=FALSE}
library(knitr)
# Function to add error bars to plots
superpose.eb <- function (x, y, ebl, ebu = ebl, length = 0.08, ...)
  arrows(x, y + ebu, x, y - ebl, angle = 90, code = 3,
  length = length, ...)

# Function to calculate standard error
se <- function(x) sd(x, na.rm=T)/sqrt(length(x))

# Load necessary packages
library(tidyr)
library(dplyr)
library(readr)
library(ggplot2)

# Sets maize and blue color scheme
color.scheme <- c('#00274c', '#ffcb05')
```

Followed instructions on https://horvath.genetics.ucla.edu/html/CoexpressionNetwork/Rpackages/WGCNA/Tutorials/, which was based on the method used in https://doi.org/10.1371/journal.pgen.0020130

# Data Preparation

```{r data-preparation}
library(WGCNA)
options(stringsAsFactors = F)

# Load phenotype data
phenotype.datatfile <- '../dataset.phenotype.Svenson_DO_HFD.v12.Rds'
all.phenotype.data <- readRDS(phenotype.datatfile)
annotation <- all.phenotype.data$annot.samples[c('mouse.id','sex','diet')]

phenotype.data <- 
  all.phenotype.data$data$raw %>% 
  as.data.frame 

phenotype.data$mouse.id <- rownames(phenotype.data)

phenotype.data <-
  phenotype.data %>%
  left_join(annotation,by='mouse.id')
  
# Load expression data
expression.datatfile <- '../dataset.mrna.Svenson_DO_HFD.v12.Rds'
expression.data <- readRDS(expression.datatfile)
mrna.data <-
  expression.data$data$raw %>% as.data.frame

# Check if all genes are ok, not too many missing values for genes or samples
good.genes <- goodSamplesGenes(mrna.data)
good.genes$allOK
```

# Network Construction

```{r loading-datasets}
nSets <- 4 # Four datasets, NCD and HFD, male and female
setLabels <- c("NCD-M","HFHS-M","NCD-F","HFHS-F")
multiExpr=vector(mode="list",length=nSets) # Create vector with two datasets

# Filter for only expression data where we have appropriate phenotype data
chow.mice.m <- phenotype.data %>% filter(diet=="chow"&sex=="M") %>% pull(mouse.id)
hf.mice.m <- phenotype.data %>% filter(diet=="hf"&sex=="M") %>% pull(mouse.id)
chow.mice.f <- phenotype.data %>% filter(diet=="chow"&sex=="F") %>% pull(mouse.id)
hf.mice.f <- phenotype.data %>% filter(diet=="hf"&sex=="F") %>% pull(mouse.id)

chow.expression.m <- mrna.data[chow.mice.m,] %>% na.omit
hf.expression.m <- mrna.data[hf.mice.m,] %>% na.omit
chow.expression.f <- mrna.data[chow.mice.f,] %>% na.omit
hf.expression.f <- mrna.data[hf.mice.f,] %>% na.omit

# Enter data on expression into multiExpr object
multiExpr[[1]]=list(data=chow.expression.m)
multiExpr[[2]]=list(data=hf.expression.m) 
multiExpr[[3]]=list(data=chow.expression.f)
multiExpr[[4]]=list(data=hf.expression.f) 

exprSize <- checkSets(multiExpr)
gsg <- goodSamplesGenesMS(multiExpr)

# Remove genes with too many missing values or no variance
if (!gsg$allOK)
{
  # Print information about the removed genes
  if (sum(!gsg$goodGenes) > 0)
    printFlush(paste("Removing genes:", paste(names(multiExpr[[1]]$data)[!gsg$goodGenes], 
                                              collapse = ", ")))
  for (set in 1:exprSize$nSets)
  {
    if (sum(!gsg$goodSamples[[set]]))
      printFlush(paste("In set", setLabels[set], "removing samples",
                       paste(rownames(multiExpr[[set]]$data)[!gsg$goodSamples[[set]]], collapse = ", ")))
    # Remove the offending genes and samples
    multiExpr[[set]]$data = multiExpr[[set]]$data[gsg$goodSamples[[set]], gsg$goodGenes];
  }
  # Update exprSize
  exprSize = checkSets(multiExpr)
}
```

## Clustering Expression Datasets

```{r diet-clustered-trees}
# Create sample trees
sampleTrees = list()
for (set in 1:nSets)
{
  sampleTrees[[set]] = hclust(dist(multiExpr[[set]]$data), method = "average")
}
# Cluster genes in each set, make a hclust tree using "average" method
for (set in 1:nSets) {
  plot(sampleTrees[[set]], 
       main = paste("Sample clustering on all genes in", setLabels[set]),
       xlab="", 
       sub="", 
       cex = 0.7)
}

# Form a multi-set structure called Traits that will hold the clinical traits
Traits = vector(mode="list", length = nSets)
for (set in 1:nSets)
{
  setSamples = rownames(multiExpr[[set]]$data)
  traitRows = match(setSamples, rownames(phenotype.data))
  Traits[[set]] = list(data = phenotype.data[traitRows,])
  rownames(Traits[[set]]$data) = rownames(phenotype.data[traitRows,])
}
collectGarbage()
# Define data set dimensions
nGenes = exprSize$nGenes
nSamples = exprSize$nSamples
```

The combined dataset includes `r nGenes` genes and `r nSamples` samples separated into `nSets` datasets (`r paste(setLabels, collapse=",")`).

```{r wgcna-network-construction}
# Choose a set of soft-thresholding powers
powers = seq(4,20,by=1)
# Initialize a list to hold the results of scale-free analysis
powerTables = vector(mode = "list", length = nSets)
# Call the network topology analysis function for each set in turn
for (set in 1:nSets)
  powerTables[[set]] = list(data = pickSoftThreshold(multiExpr[[set]]$data,
                                                     powerVector=powers,
                                                     verbose = 2)[[2]])
collectGarbage()

# Plot the results using ggplot2
library(ggplot2)
plotCols = c(2,5,6,7)
colNames = c("Scale Free Topology Model Fit", "Mean connectivity", "Median connectivity", "Max connectivity")

# Prepare data for ggplot
plotData <- data.frame()
for (set in 1:nSets) {
  for (col in 1:length(plotCols)) {
    tempData <- data.frame(
      Power = powerTables[[set]]$data[,1],
      Value = if (col == 1) -sign(powerTables[[set]]$data[,3]) * powerTables[[set]]$data[,2] else powerTables[[set]]$data[,plotCols[col]],
      Metric = colNames[col],
      Set = setLabels[set]
    )
    plotData <- rbind(plotData, tempData)
  }
}

# Plot using ggplot2
ggplot(plotData, aes(x = Power, y = Value, color = Set)) +
  geom_point() +
  facet_wrap(~ Metric, scales = "free_y") +
  theme_minimal() +
  labs(title = "Scale-Free Topology Analysis", x = "Soft Threshold (power)", y = "")
```

```{r network-construction}
network.power <- 15 # Based on the max SFT R2 maximum
net <- blockwiseConsensusModules(
        multiExpr, 
        power = network.power, 
        minModuleSize = 30, # Default is 20, tutorial said 30
        deepSplit = 2, # Default
        maxBlockSize = ncol(mrna.data), # Total number of genes
        pamRespectsDendro = FALSE, 
        mergeCutHeight = 0.25,
        numericLabels = TRUE,
        minKMEtoStay = 0.1, # Default is 0.2, tutorial said 0.1
        saveTOMs = TRUE, 
        verbose = 1)
```

Constructed modules with `r network.power` soft-thresholding power, based on the visualization of the soft-thresholding power $R^2$.

## Plotting Samples Clustered by Consensus Modules

```{r wgcna-dendrograms-by-modules}
consMEs = net$multiMEs
moduleLabels = net$colors
# Convert the numeric labels to color labels
moduleColors = labels2colors(moduleLabels)

# Loop through each dataset and plot its dendrogram
for (set in 1:nSets) {
  consTree = net$dendrograms[[set]]
  mergedColors = labels2colors(net$colors)
  plotDendroAndColors(consTree, mergedColors[net$blockGenes[[set]]],
                      main = paste("Dendrogram and module colors for", setLabels[set]),
                      "Module colors",
                      dendroLabels = FALSE, hang = 0.03,
                      addGuide = TRUE, guideHang = 0.05)
}

MEs = net$MEs
geneTree = net$dendrograms[[1]]
```

## Correlating Module Eigengenes with Phenotypes

```{r correlate-modules-phenotypes}
# Calculate module eigengenes
MEs = moduleEigengenes(multiExpr[[1]]$data, moduleColors)$eigengenes
MEs = orderMEs(MEs)

# Calculate correlation between module eigengenes and phenotypes
moduleTraitCor = cor(MEs, Traits[[1]]$data, use = "p")
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)

# Visualize the correlation as a heatmap
library(pheatmap)
pheatmap(moduleTraitCor, 
         cluster_rows = TRUE, 
         cluster_cols = TRUE, 
         display_numbers = TRUE, 
         main = "Module-Trait Relationships")

# Create a table of correlations and p-values
corPvalueTable <- data.frame(
  Module = rownames(moduleTraitCor),
  Correlation = moduleTraitCor[, "chol2"],
  Pvalue = moduleTraitPvalue[, "chol2"]
)

# Display the table using kable
library(knitr)
kable(corPvalueTable, caption = "Correlation and P-value of Module Eigengenes with 'chol2'")
```

## Correlating Module Eigengenes with Phenotype 'chol2'

```{r correlate-modules-chol2}
# Calculate module eigengenes
MEs = moduleEigengenes(multiExpr[[1]]$data, moduleColors)$eigengenes
MEs = orderMEs(MEs)

# Extract the 'chol2' phenotype data
chol2 = Traits[[1]]$data$chol2

# Calculate correlation between module eigengenes and 'chol2' phenotype
moduleChol2Cor = cor(MEs, chol2, use = "p")
moduleChol2Pvalue = corPvalueStudent(moduleChol2Cor, nSamples)

# Visualize the correlation as a bar plot
library(ggplot2)
chol2CorData <- data.frame(
  Module = names(moduleChol2Cor),
  Correlation = moduleChol2Cor,
  Pvalue = moduleChol2Pvalue
)

ggplot(chol2CorData, aes(x = Module, y = Correlation, fill = Pvalue < 0.05)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(title = "Module-Trait Relationships with 'chol2'", x = "Module", y = "Correlation with 'chol2'") +
  scale_fill_manual(values = c("TRUE" = "red", "FALSE" = "grey"), name = "Significant")

# Display the table using kable
kable(chol2CorData, caption = "Correlation and P-value of Module Eigengenes with 'chol2'")

# Identify key genes (hub genes) in significant modules
significantModules = names(which(moduleChol2Pvalue < 0.05))
hubGenes = list()
for (module in significantModules) {
  moduleGenes = which(moduleColors == module)
  geneModuleMembership = cor(multiExpr[[1]]$data[, moduleGenes], MEs[, module], use = "p")
  hubGenes[[module]] = names(sort(geneModuleMembership, decreasing = TRUE)[1:10])
}

# Print hub genes for significant modules
hubGenes
```

# Output

Wrote this out to read in in the script Liver-WGCNA-Cholesterol.Qmd

```{r write}
save.image(file = "ncd_hf_wcgna_networks.RData")
```

# Session Information

```{r session-info}
sessionInfo()
```