---
title: "WGCNA Analysis of DO Livers"
subtitle: "Construction of Modules"
author: "Dave Bridges"
format: html
execute:
  keep-md: true
---

```{r global_options, include=FALSE}
library(knitr)
#figures makde will go to directory called figures, will make them as both png and pdf files 
opts_chunk$set(fig.path='figures/',
               echo=TRUE, warning=FALSE, message=FALSE,dev=c('png','pdf'))
options(scipen = 2, digits = 3)
# set echo and message to TRUE if you want to display code blocks and code output respectively

knitr::knit_hooks$set(inline = function(x) {
  knitr:::format_sci(x, 'md')
})


superpose.eb <- function (x, y, ebl, ebu = ebl, length = 0.08, ...)
  arrows(x, y + ebu, x, y - ebl, angle = 90, code = 3,
  length = length, ...)

  
se <- function(x) sd(x, na.rm=T)/sqrt(length(x))

#load these packages, nearly always needed
library(tidyr)
library(dplyr)
library(readr)
library(ggplot2)

# sets maize and blue color scheme
color.scheme <- c('#00274c', '#ffcb05')
```

Followed instructions on https://horvath.genetics.ucla.edu/html/CoexpressionNetwork/Rpackages/WGCNA/Tutorials/, which was based on the method used in https://doi.org/10.1371/journal.pgen.0020130

# Data Preparation

```{r data-preparation}
library(WGCNA)
options(stringsAsFactors = F)

phenotype.datatfile <- '../dataset.phenotype.Svenson_DO_HFD.v12.Rds'
all.phenotype.data <- readRDS(phenotype.datatfile)
annotation <- all.phenotype.data$annot.samples[c('mouse.id','sex','diet')]

phenotype.data <- 
  all.phenotype.data$data$raw %>% 
  as.data.frame 

phenotype.data$mouse.id <- rownames(phenotype.data)

phenotype.data <-
  phenotype.data %>%
  left_join(annotation,by='mouse.id')
  
expression.datatfile <- '../dataset.mrna.Svenson_DO_HFD.v12.Rds'
expression.data <- readRDS(expression.datatfile)
mrna.data <-
  expression.data$data$raw %>% as.data.frame

good.genes <- goodSamplesGenes(mrna.data)
#check if all genes are ok, not too many missing values for genes or samples
good.genes$allOK
```

# Network Construction

```{r loading-datasets}
nSets <- 4 #four datasets, NCD and HFD, male and female
setLabels <- c("NCD-M","HFHS-M","NCD-F","HFHS-F")
multiExpr=vector(mode="list",length=nSets) #create vector with two datasets

#filter for only exprerssion data where we have appropriatet phenotype data
chow.mice.m <- phenotype.data %>% filter(diet=="chow"&sex=="M") %>% pull(mouse.id)
hf.mice.m <- phenotype.data %>% filter(diet=="hf"&sex=="M") %>% pull(mouse.id)
chow.mice.f <- phenotype.data %>% filter(diet=="chow"&sex=="F") %>% pull(mouse.id)
hf.mice.f <- phenotype.data %>% filter(diet=="hf"&sex=="F") %>% pull(mouse.id)

chow.expression.m <- mrna.data[chow.mice.m,] %>% na.omit
hf.expression.m <- mrna.data[hf.mice.m,] %>% na.omit
chow.expression.f <- mrna.data[chow.mice.f,] %>% na.omit
hf.expression.f <- mrna.data[hf.mice.f,] %>% na.omit

# enter data on expression in to multiExpr object
multiExpr[[1]]=list(data=chow.expression.m)
multiExpr[[2]]=list(data=hf.expression.m) 
multiExpr[[3]]=list(data=chow.expression.f)
multiExpr[[4]]=list(data=hf.expression.f) 

exprSize <- checkSets(multiExpr)
gsg <- goodSamplesGenesMS(multiExpr)


# remove genes with too many missing values or no variance
if (!gsg$allOK)
{
  # Print information about the removed genes:
  if (sum(!gsg$goodGenes) > 0)
    printFlush(paste("Removing genes:", paste(names(multiExpr[[1]]$data)[!gsg$goodGenes], 
                                              collapse = ", ")))
  for (set in 1:exprSize$nSets)
  {
    if (sum(!gsg$goodSamples[[set]]))
      printFlush(paste("In set", setLabels[set], "removing samples",
                       paste(rownames(multiExpr[[set]]$data)[!gsg$goodSamples[[set]]], collapse = ", ")))
    # Remove the offending genes and samples
    multiExpr[[set]]$data = multiExpr[[set]]$data[gsg$goodSamples[[set]], gsg$goodGenes];
  }
  # Update exprSize
  exprSize = checkSets(multiExpr)
}
```

## Clustering Expression Datasets

```{r diet-clustered-trees}
#crerate two sample trees
sampleTrees = list()
for (set in 1:nSets)
{
  sampleTrees[[set]] = hclust(dist(multiExpr[[set]]$data), method = "average")
}
#cluster genes in each set, make a hclust tree using "average" method
for (set in 1:nSets)
  plot(sampleTrees[[set]], 
       main = paste("Sample clustering on all genes in",
                    setLabels[set]),
       xlab="", 
       sub="", 
       cex = 0.7);


# Form a multi-set structure called Traits that will hold the clinical traits.
Traits = vector(mode="list", length = nSets);
for (set in 1:nSets)
{
  setSamples = rownames(multiExpr[[set]]$data);
  traitRows = match(setSamples, rownames(phenotype.data));
  Traits[[set]] = list(data = phenotype.data[traitRows,]);
  rownames(Traits[[set]]$data) = rownames(phenotype.data[traitRows,]);
}
collectGarbage();
# Define data set dimensions
nGenes = exprSize$nGenes;
nSamples = exprSize$nSamples;
```

The combined dataset includes `r nGenes` genes and `r nSamples` samples separated into `nSets` datasets (`r paste(setLabels, collapse=",")`).

```{r wgcna-network-construction}
# Choose a set of soft-thresholding powers
powers = seq(4,20,by=1)
# Initialize a list to hold the results of scale-free analysis
powerTables = vector(mode = "list", length = nSets);
# Call the network topology analysis function for each set in turn
for (set in 1:nSets)
  powerTables[[set]] = list(data = pickSoftThreshold(multiExpr[[set]]$data,
                                                     powerVector=powers,
                                                     verbose = 2)[[2]]);
collectGarbage();
# Plot the results:
colors = color.scheme

# Will plot these columns of the returned scale free analysis tables
plotCols = c(2,5,6,7)
colNames = c("Scale Free Topology Model Fit", "Mean connectivity", "Median connectivity",
"Max connectivity");
# Get the minima and maxima of the plotted points
ylim = matrix(NA, nrow = 2, ncol = 4);
for (set in 1:nSets)
{
  for (col in 1:length(plotCols))
  {
    ylim[1, col] = min(ylim[1, col], powerTables[[set]]$data[, plotCols[col]], na.rm = TRUE);
    ylim[2, col] = max(ylim[2, col], powerTables[[set]]$data[, plotCols[col]], na.rm = TRUE);
  }
}
# Plot the quantities in the chosen columns vs. the soft thresholding power
sizeGrWindow(8, 6)
pdf(file = "scaleFreeAnalysis.pdf", wi = 8, he = 6)
par(mfcol = c(2,2));
par(mar = c(4.2, 4.2 , 2.2, 0.5))
cex1 = 0.7;
for (col in 1:length(plotCols)) for (set in 1:nSets)
{
  if (set==1)
  {
    plot(powerTables[[set]]$data[,1], -sign(powerTables[[set]]$data[,3])*powerTables[[set]]$data[,2],
         xlab="Soft Threshold (power)",ylab=colNames[col],type="n", ylim = ylim[, col],
         main = colNames[col]);
    addGrid();
  }
  if (col==1)
  {
    text(powerTables[[set]]$data[,1], -sign(powerTables[[set]]$data[,3])*powerTables[[set]]$data[,2],
         labels=powers,cex=cex1,col=colors[set]);
  } else
    text(powerTables[[set]]$data[,1], powerTables[[set]]$data[,plotCols[col]],
         labels=powers,cex=cex1,col=colors[set]);
  if (col==1)
  {
    legend("bottomright", legend = setLabels, col = colors, pch = 20) ;
  } else
    legend("topright", legend = setLabels, col = colors, pch = 20) ;
}
dev.off();
```


```{r network-construction}
network.power <- 15 #based on the max SFT R2 maximum
net <- blockwiseConsensusModules(
        multiExpr, 
        power = network.power, 
        minModuleSize = 30, #default is 20, tutorial said 30
        deepSplit = 2, #default
        maxBlockSize = ncol(mrna.data), #total number of genes
        pamRespectsDendro = FALSE, 
        mergeCutHeight = 0.25,
        numericLabels = TRUE,
        minKMEtoStay = 0.1, #default is 0.2, tutorial said 0.1
        saveTOMs = TRUE, 
        verbose = 1)
```

Constructed modules with `r network.power` soft-thresholding power, based on the visualization of the soft-thresholding power $R^2$.

## Plotting Samples Clustered by Consensus Modules

```{r wgcna-dendrograms-by-modules}

consMEs = net$multiMEs
moduleLabels = net$colors
# Convert the numeric labels to color labels
moduleColors = labels2colors(moduleLabels)
consTree = net$dendrograms[[1]]

# Convert labels to colors for plotting
mergedColors = labels2colors(net$colors)
# Plot the dendrogram and the module colors underneath
plotDendroAndColors(net$dendrograms[[1]], mergedColors[net$blockGenes[[1]]],
                    "Module colors",
                    dendroLabels = FALSE, hang = 0.03,
                    addGuide = TRUE, guideHang = 0.05)

# Convert labels to colors for plotting
mergedColors = labels2colors(net$colors)

MEs = net$MEs;
geneTree = net$dendrograms[[1]];
```

# Output

Wrote this out to read in in the script Liver-WGCNA-Cholesterol.Qmd

```{r write}
save.image(file = "ncd_hf_wcgna_networks.RData")
```

# Session Information

```{r session-info}
sessionInfo()
```