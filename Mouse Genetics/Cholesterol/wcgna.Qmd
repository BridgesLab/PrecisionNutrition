---
title: "WGCNA Analysis of DO Livers"
author: "Dave Bridges"
format: html
execute:
  keep-md: true
---

```{r global_options, include=FALSE}
library(knitr)
#figures makde will go to directory called figures, will make them as both png and pdf files 
opts_chunk$set(fig.path='figures/',
               echo=TRUE, warning=FALSE, message=FALSE,dev=c('png','pdf'))
options(scipen = 2, digits = 3)
# set echo and message to TRUE if you want to display code blocks and code output respectively

knitr::knit_hooks$set(inline = function(x) {
  knitr:::format_sci(x, 'md')
})


superpose.eb <- function (x, y, ebl, ebu = ebl, length = 0.08, ...)
  arrows(x, y + ebu, x, y - ebl, angle = 90, code = 3,
  length = length, ...)

  
se <- function(x) sd(x, na.rm=T)/sqrt(length(x))

#load these packages, nearly always needed
library(tidyr)
library(dplyr)
library(readr)
library(ggplot2)

# sets maize and blue color scheme
color.scheme <- c('#00274c', '#ffcb05')
```

Followed instructions on https://horvath.genetics.ucla.edu/html/CoexpressionNetwork/Rpackages/WGCNA/Tutorials/, which was based on the method used in https://doi.org/10.1371/journal.pgen.0020130

# Data Preparation

```{r data-preparation}
library(WGCNA)
options(stringsAsFactors = F)
expression.filename <- "GSE72759_DO192_RNAseq_UpperQuartileNormalized_n21454genes_forGEOSubmission.txt"

library(tibble)
expression.data <- read_tsv(expression.filename) %>%
  rename(gene_id=1) %>%
  column_to_rownames('gene_id') %>%
  t %>% as.data.frame #rotate with samples on the left and genes on the columns

phenotype.filename <- 'Svenson_HFD_DO_phenotype_V12.csv'
phenotype.data <- read_csv(phenotype.filename) %>% 
  select(mouse.id,chol2) %>%
  column_to_rownames('mouse.id')
  
phenotype.data[phenotype.data=='-999999'] <- NA

good.genes <- goodSamplesGenes(expression.data)
#check if all genes are ok, not too many missing values for genes or samples
good.genes$allOK

```

## Clustering Samples

This is to look for outliers with respect to gene expression

```{r wgcna-sample-clustering}
sampleTree=hclust(dist(expression.data),method="average")
plot(sampleTree,main="Sample Clustering to Detect Outliers",
     xlab="",
     type="n")

#sample F413 appears to be an outlier, consider removing it
```

# Network Construction

```{r wgcna-network-construction}
#Chooseasetofsoft-thresholdingpowers 
powers=c(c(1:10),seq(from=12,to=20,by=2)) #Callthenetworktopologyanalysisfunction 
sft <- pickSoftThreshold(expression.data,powerVector=powers,verbose=5)

#Scale-free topology fit index as a function of the soft-thresholding power 
ggplot(sft$fitIndices,aes(y=-sign(slope)*SFT.R.sq,
               x=Power)) +
  geom_point() +
  geom_hline(yintercept=0.9, col="red",lty=2) +
  geom_label(aes(label=Power)) +
  labs(x="Soft Threshold (power)",
     y="Scale Free Topology Model Fit, signedR^2",
     main="Scale Independence")

#Mean connectivity as a function of the soft-thresholding power 
ggplot(sft$fitIndices,
       aes(y=mean.k.,
               x=Power)) +
  geom_point() +
  labs(x="Soft Threshold (power)",
     y="Mean Connectivity",
     main="Scale Independence")

#Chose a power of 14, the lowest power for which the scale free topology curve flattens after reaching a high value
sft.power <- 14


net <- blockwiseModules(expression.data,
                        power=sft.power, 
                        TOMType="unsigned",
                        maxBlockSize=ncol(expression.data),
                        minModuleSize=30, 
                        reassignThreshold=0,
                        mergeCutHeight=0.25, #threshold for merging modules
                        numericLabels=TRUE,
                        pamRespectsDendro=FALSE, 
                        saveTOMs=TRUE, 
                        saveTOMFileBase="DO_Mouse_Tom", verbose=3)
```

# Analysis of Constructed Network

```{r wgcna-genes-per-module}
table(net$colors) %>%
  kable(caption="Genes per module (0 indicates unassigned")

#Convertlabelstocolorsforplotting 
mergedColors <- labels2colors(net$colors) 
#Plotthedendrogramandthemodulecolorsunderneath 
plotDendroAndColors(net$dendrograms[[1]],mergedColors[net$blockGenes[[1]]], "Modulecolors", dendroLabels=FALSE,hang=0.03, addGuide=TRUE,guideHang=0.05)
```

Finished at end of one step module detection